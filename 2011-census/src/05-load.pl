#!/usr/bin/perl -w

# This file is licensed CC0 by Andrew Harvey <andrew.harvey4@gmail.com>
#
# To the extent possible under law, the person who associated CC0
# with this work has waived all copyright and related or neighboring
# rights to this work.
# http://creativecommons.org/publicdomain/zero/1.0/

use strict;
use autodie;
use Text::CSV;
use DBI;

my $structure;
my $profile;

my %profile_fullname = (
  "BCP" => "Basic Community Profile",
  "IP" => "Aboriginal and Torres Strait Islander Peoples Profile",
  "TSP" => "Time Series Profile"
);

if (@ARGV >= 2) {
  $structure = uc($ARGV[0]);
  $profile = uc($ARGV[1]);
}else{
  print STDERR "Usage: $0 <ASGS_Structure> <Census_Profile>\n";
  exit 1;
}

print "Loading $profile $structure...\n";

my $dbh = DBI->connect("DBI:Pg:", '', '' , {'RaiseError' => 1, AutoCommit => 1});

my %loads;

# read through the lines generated by 04-prepare-from-expansion.pl
for my $line (<STDIN>) {
  chomp $line;
  # and unless it is a comment or empty line...
  unless (($line =~ /^#/) || ($line =~ /^\s*$/)) {
    # "parse" the line
    if ($line =~ /^(\w\d+) ([^\s]+) ([^\s]+) (.*)$/) {
      my ($seq, $file, $table, $insert) = ($1, $2, $3, $4);
      my @insert_values = split(/,/, $insert);

      # change NULL into \N which COPY will interpret as a NULL value
      map { s/NULL/\\N/g } @insert_values;

      # if the table for the line read is for the same profile as the program was invoked with
      if (lc(substr($table, 0, 1)) eq lc(substr($profile, 0, 1))) {
        if (!exists $loads{$file}) {
          $loads{$file} = {};
        }
        $loads{$file}->{$seq} = [$table, \@insert_values];
      }
    }else{
      die "Map file line of unexpected format: $line\n";
    }
  }
}

# open each DataPack file
for my $file (sort keys %loads) {
  open (my $datapack_file, '<', "DataPacks/2011 ". $profile_fullname{$profile} . " Release 1/Sequential Number Descriptor/$structure/AUST/2011Census_${file}_AUST_${structure}_sequential.csv");

  # read in this datapack file as a CSV file
  my $csv = Text::CSV->new();
  $csv->column_names($csv->getline($datapack_file));
  my %datapack;
  while (my $row = $csv->getline_hr($datapack_file)) {
    # and for each seq id which we need to insert data for
    for my $seq ('region_id', sort keys %{$loads{$file}}) {
      # add the data from this line in the CSV file to the hash
      push @{$datapack{$seq}}, $row->{$seq};
    }
  }
  close $datapack_file or warn $!;

  # for each seq id...
  for my $seq (sort keys %{$loads{$file}}) {
    print "  DataPack $file Sequential ID $seq\n";

    # ...COPY all the values for each region in this $structure for the current $seq id into the database
    $dbh->do("COPY census_2011." . $loads{$file}->{$seq}->[0] . "_$structure FROM STDIN;");

    for (my $i = 0; $i < scalar @{$datapack{$seq}}; $i++) {
#      print ($datapack{'region_id'}->[$i] . "\t" . join("\t", @{$loads{$file}->{$seq}->[1]}) . "\t" . $datapack{$seq}->[$i] . "\n");
      $dbh->pg_putcopydata($datapack{'region_id'}->[$i] . "\t" . join("\t", @{$loads{$file}->{$seq}->[1]}) . "\t" . $datapack{$seq}->[$i] . "\n");
    }

    $dbh->pg_putcopyend() or die $!;
  }
}

$dbh->disconnect or warn $!;
